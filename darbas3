<html>
    <body>
        <script src="three.min.js"></script>

        <script>
            var camera, scene, renderer;
            init();
            animate();
            function init(){
                scene = new THREE.Scene();
                camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 10000);
                camera.position.set(10000,100,10000);
                camera.lookAt(scene.position); 
                renderer = new THREE.WebGLRenderer();
                renderer.setSize(window.innerWidth, window.innerHeight)
                document.body.appendChild(renderer.domElement);
    
                var size = 32, step = 8;
                var geometry = new THREE.Geometry();
                var material = new THREE.LineBasicMaterial({color: 'green'});  
				var material1 = new THREE.MeshBasicMaterial({color: 'white'});
				var materials = [
					new THREE.MeshBasicMaterial({color : 0x000000}),
					new THREE.MeshBasicMaterial({color : 0x0F0000}),
					new THREE.MeshBasicMaterial({color : 0xF00000}),
					new THREE.MeshBasicMaterial({color : 0x000000}),
					new THREE.MeshBasicMaterial({color : 0x0F0000}),
					new THREE.MeshBasicMaterial({color : 0xF00000})
				];
				var side_materials = new THREE.MultiMaterial( materials );
				var materials2 = [
					new THREE.MeshBasicMaterial({color : 0xFFFFFF}),
					new THREE.MeshBasicMaterial({color : 0xFFFFFF}),
					new THREE.MeshBasicMaterial({color : 0x000FFF}),
					new THREE.MeshBasicMaterial({color : 0xFFFFFF}),
					new THREE.MeshBasicMaterial({color : 0x000FFF}),
					new THREE.MeshBasicMaterial({color : 0xF00FFF})
				];
				var side_materials2 = new THREE.MultiMaterial( materials2 )
				
				var material2 = new THREE.MeshBasicMaterial({color: 'brown'});		
                for ( var i = - size; i <= size; i += step){
                    geometry.vertices.push(new THREE.Vector3( - size, 1, i ));
                    geometry.vertices.push(new THREE.Vector3( size, 1, i ));
   
                    geometry.vertices.push(new THREE.Vector3( i, 1, - size ));
                    geometry.vertices.push(new THREE.Vector3( i, 1, size ));
                }
				function pawns(x,y,mat){
				if(x== 20){
					var mat = side_materials;
				}
				else{
					var mat = side_materials2;
				}
                var pestininkas = new THREE.Object3D();
				var pestininkas1 = new THREE.Mesh(new THREE.CubeGeometry(5,1,5),mat);
				pestininkas.add(pestininkas1);
				var pestininkas2 = new THREE.Mesh(new THREE.CubeGeometry(2,5,2), mat);
				pestininkas.add(pestininkas2);
				var pestininkas3 = new THREE.Mesh(new THREE.CubeGeometry(3,3,3), mat);
				pestininkas.add(pestininkas3);
				var pestininkas4 = new THREE.Mesh(new THREE.CubeGeometry(1.5,0.5,1.5),mat);
				pestininkas.add(pestininkas4);
				pestininkas1.position.set(x,1.5,y);
				pestininkas2.position.set(x,3.5,y);
				pestininkas3.position.set(x,5.5,y);
				pestininkas4.position.set(x,7,y);
				scene.add(pestininkas);
				}
				//
				function tower(x,y){
				if(x== 25){
					var mat = side_materials;
				}
				else{
					var mat = side_materials2;
				}
				var bokstas = new THREE.Object3D();
				var bokstas1 = new THREE.Mesh(new THREE.CubeGeometry(5,1,5), mat);
				bokstas.add(bokstas1);
				var bokstas2 = new THREE.Mesh(new THREE.CubeGeometry(2,5,2), mat);
				bokstas.add(bokstas2);
				var bokstas3 = new THREE.Mesh(new THREE.CubeGeometry(5,5,5), mat);
				bokstas.add(bokstas3);
				var bokstas4 = new THREE.Mesh(new THREE.CubeGeometry(1,1,1), mat);
				bokstas.add(bokstas4);
				var bokstas5 = new THREE.Mesh(new THREE.CubeGeometry(1,1,1), mat);
				bokstas.add(bokstas5);
				var bokstas6 = new THREE.Mesh(new THREE.CubeGeometry(1,1,1), mat);
				bokstas.add(bokstas6);
				var bokstas7 = new THREE.Mesh(new THREE.CubeGeometry(1,1,1), mat);
				bokstas.add(bokstas7);
				bokstas1.position.set(x+2.5,1.5,y+2.5);
				bokstas2.position.set(x+2.5,4,y+2.5);
				bokstas3.position.set(x+2.5,6,y+2.5);
				bokstas4.position.set(x+4.5,8.5,y+4.5);
				bokstas5.position.set(x+4.5,8.5,y+0.5);
				bokstas6.position.set(x+0.5,8.5,y+4.5);
				bokstas7.position.set(x+0.5,8.5,y+0.5);
				scene.add(bokstas);
				}
				//
				function horse(x,y){
				if(x== 25){
					var mat = side_materials;
				}
				else{
					var mat = side_materials2;
				}
				var arklys = new THREE.Object3D();
				var arklys1 = new THREE.Mesh(new THREE.CubeGeometry(5,1,5), mat);
				arklys.add(arklys1);
				var arklys2 = new THREE.Mesh(new THREE.CubeGeometry(2,7,2), mat);
				arklys.add(arklys2);
				var arklys3 = new THREE.Mesh(new THREE.CubeGeometry(2,2,2), mat);
				arklys.add(arklys3);
				var arklys4 = new THREE.Mesh(new THREE.CubeGeometry(2,2,2), mat);
				arklys.add(arklys4);
				var arklys5 = new THREE.Mesh(new THREE.CubeGeometry(0.5,1,2), mat);
				arklys.add(arklys5);
				if(x == 25){
				arklys1.position.set(x+3,1.5,y);
				arklys2.position.set(x+4,5,y);
				arklys3.position.set(x+2,7,y);
				arklys4.position.set(x+3,6,y);
				arklys5.position.set(x+4,9,y);
				}
				else{
				arklys1.position.set(x+2.5,1.5,y);
				arklys2.position.set(x+3.5,5,y);
				arklys3.position.set(x+3,7,y);
				arklys4.position.set(x+5,6,y);
				arklys5.position.set(x+3.5,9,y);
				}

				scene.add(arklys);
				}
				//
				function rook(x,y){
				if(x== 28){
					var mat = side_materials;
				}
				else{
					var mat = side_materials2;
				}
				var rikis = new THREE.Object3D();
				var rikis1 = new THREE.Mesh(new THREE.CubeGeometry(5,1,5), mat);
				rikis.add(rikis1);
				var rikis2 = new THREE.Mesh(new THREE.CubeGeometry(2,9,2), mat);
				rikis.add(rikis2);
				var rikis3 = new THREE.Mesh(new THREE.CubeGeometry(3,6,3), mat);
				rikis.add(rikis3);
				var rikis4 = new THREE.Mesh(new THREE.CubeGeometry(1,1,1), mat);
				rikis.add(rikis4);
				rikis1.position.set(x,1.5,y);
				rikis2.position.set(x,6,y);
				rikis3.position.set(x,5,y);
				rikis4.position.set(x,11,y);
				scene.add(rikis);
				}
				//
				function queen(x,y){
				if(x== 28){
					var mat = side_materials;
				}
				else{
					var mat = side_materials2;
				}
				var karaliene = new THREE.Object3D();
				var karaliene1 = new THREE.Mesh(new THREE.CubeGeometry(5,1,5), mat);
				karaliene.add(karaliene1);
				var karaliene2 = new THREE.Mesh(new THREE.CubeGeometry(2,10,2), mat);
				karaliene.add(karaliene2);
				var karaliene3 = new THREE.Mesh(new THREE.CubeGeometry(3,5,3), mat);
				karaliene.add(karaliene3);
				var karaliene4 = new THREE.Mesh(new THREE.CubeGeometry(4,1,4), mat);
				karaliene.add(karaliene4);
				var karaliene5 = new THREE.Mesh(new THREE.CubeGeometry(1,3,1), mat);
				karaliene.add(karaliene5);
				karaliene1.position.set(x,1.5,y);
				karaliene2.position.set(x,6,y);
				karaliene3.position.set(x,6,y);
				karaliene4.position.set(x,9,y);
				karaliene5.position.set(x,11,y);
				scene.add(karaliene);
				}
				//
				function king(x,y){
				if(x== 28){
					var mat = side_materials;
				}
				else{
					var mat = side_materials2;
				}
				var karalius = new THREE.Object3D();
				var karalius1 = new THREE.Mesh(new THREE.CubeGeometry(5,1,5), mat);
				karalius.add(karalius1);
				var karalius2 = new THREE.Mesh(new THREE.CubeGeometry(2,10,2), mat);
				karalius.add(karalius2);
				var karalius3 = new THREE.Mesh(new THREE.CubeGeometry(3,5,3), mat);
				karalius.add(karalius3);
				var karalius4 = new THREE.Mesh(new THREE.CubeGeometry(4,2,4), mat);
				karalius.add(karalius4);
				var karalius5 = new THREE.Mesh(new THREE.CubeGeometry(4.5,1,4.5), mat);
				karalius.add(karalius5);
				var karalius6 = new THREE.Mesh(new THREE.CubeGeometry(1,5,1), mat);
				karalius.add(karalius6);
				var karalius7 = new THREE.Mesh(new THREE.CubeGeometry(1,1,3), mat);
				karalius.add(karalius7);
				karalius1.position.set(x,1.5,y);
				karalius2.position.set(x,6,y);
				karalius3.position.set(x,6,y);
				karalius4.position.set(x,9,y);
				karalius5.position.set(x,10,y);
				karalius6.position.set(x,11,y);
				karalius7.position.set(x,12.5,y);
				scene.add(karalius);
				}
				//
                var line = new THREE.Line( geometry, material, THREE.LinePieces);
                scene.add(line);
				//one side//
                pawns(20,12);
				pawns(20,28);
				pawns(20,20);
				pawns(20,4);
				pawns(20,-4);
				pawns(20,-12);
				pawns(20,-20);
				pawns(20,-28);
				tower(25,25);
				tower(25,-30);
				horse(25,12);
				horse(25,-12);
				rook(28,20);
				rook(28,-20);
				queen(28,4);
				king(28,-4);
				
				//other side//
				pawns(-20,12);
				pawns(-20,28);
				pawns(-20,20);
				pawns(-20,4);
				pawns(-20,-4);
				pawns(-20,-12);
				pawns(-20,-20);
				pawns(-20,-28);
				tower(-30,25);
				tower(-30,-30);
				horse(-30,12);
				horse(-30,-12);
				rook(-28,20);
				rook(-28,-20);
				queen(-28,4);
				king(-28,-4);
 
                render();
            }
            function animate(){
                requestAnimationFrame( animate );
                render();
            }
            function render() {
                
                var timer = Date.now() * 0.0002;
            
                camera.position.x = Math.cos( timer ) * 10;
                camera.position.z = Math.sin( timer ) * 10;
    
                camera.lookAt( scene.position );
                renderer.render( scene, camera );
            }
        </script>
    </body>
</html>
